===========================
General
===========================

Atlasing based on scaling and rotation of UVs.
Render out the texture in the UV shell + a few pixels outside the area.
Grouping of UV shells needed for shared texture - same transformations applied to both.


===========================
UI
===========================
	* Numeric Input:		External border width
	* Numeric Input (per object):	Priority
	* Checkbox (per object):	Allow scaleX
	* Checkbox (per object):	Allow scaleY
	* Checkbox (per object):	Allow non-uniform scale
	* Checkbox (per object):	Allow rotate
	* Numeric Input:		Resolution

===========================
Implementation
===========================

Idea 1:
	Go down the list in priority order. Try and find an area for the object based on its options. Use other objects and their priorities to estimate how much space this can take up ((priority * 100%) / prioritySum). Group all shells of an object.

Idea 2:
	Allow initial placement and scaling of objects so they do not overlap. Then scale up and rotate to maximize space usage.

Idea 3:
	Manual placement - just a tool to render the texture.

Detecting overlaps:
	Poly intersection.
	Spatial	Hash Table
	Packing non-convex polygons - "pants packing"
