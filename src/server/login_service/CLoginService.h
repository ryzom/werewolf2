/**
 * \file CLoginService.h
 * \date December 2004
 * \author Matt Raykowski
 */

/* Copyright, 2004 Werewolf
 *
 * This file is part of Werewolf.
 * Werewolf is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.

 * Werewolf is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with Werewolf; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
 * MA 02111-1307, USA.
 */

#ifndef __CLOGINSERVICE_H__
#define __CLOGINSERVICE_H__

//
// System Includes
//
#include <vector>

//
// NeL Includes
//
#include <nel/misc/types_nl.h>
#include <nel/net/service.h>
#include <nel/misc/displayer.h>

//
// Werewolf Includes
//

//
// Class
//

extern NLMISC::CLog *gOutput;

#include <mysql.h>

std::string sqlQuery(const std::string &query, sint32 &nbRow, MYSQL_ROW &firstRow, MYSQL_RES *&result);

/**
 * \brief Data pertaining to specific front-ends.
 */
struct CFrontEnd {
	CFrontEnd(uint16 sid, bool patching, const std::string& patchingURI) : SId(sid), Patching(patching), PatchURI(patchingURI)	{}

	uint16		SId;		// Service Id of the frontend on the remote shard
	bool		Patching;	// Is FS in patching mode
	std::string	PatchURI;	// Patch URI
};

/**
 * \brief Data pertaining to a shard.
 */
struct CShard {
	CShard (uint32 shardId, uint16 sid) : ShardId(shardId), NbPlayers(0), SId(sid) {}
	
	uint32	ShardId;	// uniq shard id generated by the database, used to identify a WS
	uint32	NbPlayers;	// number of player for *this* LS, the total number of player for a shard is in the database
	uint16	SId;		// uniq service id used to identify the connection when a callback happen

	std::vector<CFrontEnd>	FrontEnds;	// frontends on the shard
};

class CLoginService : public NLNET::IService
{
public:
	CLoginService() : m_Init(false) { ; }
	void init();
	bool update();
	
	// release the service, save the universal time
	void release();

	/**
	 * \brief Beeps the PC speaker.
	 */
	void beep(uint freq, uint nb, uint beepDuration, uint pauseDuration);


	/****
	 * Some methods for getting at important data.
	 ****/

	NLNET::CCallbackServer *getClientServer();
	std::vector<CShard> getShardList();
	MYSQL *getDatabase();
private:
	// methods
	/**
	 * \brief Initializes the connection and callbacks for the Welcome Service.
	 */
	void connectionWSInit();

	/**
	 * \brief Updates related to the connection with the Welcome Service.
	 */
	void connectionWSUpdate();

	/**
	 * \brief Releases shards associated with this service in the Welcome Service.
	 */
	void connectionWSRelease();

	/**
	 * \brief Initializes inbound client connection handling.
	 */
	void connectionCLInit();
	void connectionCLUpdate();
	void connectionCLRelease();

	// memebers
	bool m_Init;
	NLMISC::CFileDisplayer	*m_FileDisplay;
	NLMISC::CStdDisplayer	*StdDisplay;

	//NLNET::CBufServer		*m_ClientServer;
	NLNET::CCallbackServer	*m_CallbackServer;

	MYSQL					*m_DatabaseConnection;
	/**
	 * \brief List of shards.
	 */
	std::vector<CShard> m_Shards;
};


#endif
