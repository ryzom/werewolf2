/**
 * \file CUserManager.h 
 * \date September 2009
 * \author Matt Raykowski
 */

/* Copyright, 2009 Werewolf
 *
 * This file is part of Werewolf.
 * Werewolf is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.

 * Werewolf is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with Werewolf; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
 * MA 02111-1307, USA.
 */

#ifndef __CUSERMANAGER_H__
#define __CUSERMANAGER_H__

//
// Standard Includes
//
#include <string>
#include <list>
#include <vector>

//
// System Includes
//

//
// NeL Includes
//
#include <nel/misc/types_nl.h>
#include <nel/misc/stream.h>
#include <nel/net/buf_net_base.h>
//
// Werewolf Includes
//	
#include "wwcommon/ISingleton.h"

//
// Namespaces
//

/**
 * \brief Contains network-level user information.
 */
struct CUser {
	/// An enum that defines the various states that a user can be in.
	enum EUserState {
		UserStateOffline = 0,
		UserStateCharSelect = 1,
		UserStateCharCreate = 2,
		UserStatePlaying = 3
	};


	struct CUserConnection {
		/// Holds the connection for this client.
		NLNET::TSockId  Con;
	};

	/// Data-filling constructor, default UserState to UserStateOffline
	CUser(uint32 uid, uint32 plrallowed) : UserID(uid), 
		UserState(UserStateOffline), 
		CharactersAllowed(plrallowed), 
		CharacterID(0),
		SobID(0) { };

	/// Data-filling constructor
	CUser(uint32 uid, uint32 plrallowed, EUserState userState) : UserID(uid), 
			UserState(userState), 
			CharactersAllowed(plrallowed), 
			CharacterID(0),
			SobID(0) { };

	/// Default destructor.
	~CUser() { };
	

	/// The userid of this player.
	uint32 UserID;

	/// The online status of the user.
	EUserState UserState;

	/// The Simulation Object ID that this player is controlling.
	uint32 CharactersAllowed;

	/// This is the character that this player logged in as.
	uint32 CharacterID;

	/// The Simulation Object ID that this player is controlling.
	uint32 SobID;

	CUserConnection UserConnection;

	/// Get if the user is connect to a frontend.
	bool isConnected() { if(UserState != UserStateOffline) return true; return false; }

	/// Convert UserState from string.
	static EUserState convertUserStateFromString(std::string userState) {
		if(userState == "CharSelect") {
			 return UserStateCharSelect;
		} else if(userState == "CharCreate") {
			return UserStateCharCreate;
		} else if(userState == "Playing") {
			return UserStatePlaying;
		} else { // Always default to offline.
			return UserStateOffline;
		}
	}

	/// Convert UserState to string.
	static std::string convertUserStateToString(EUserState userState) {
		if(userState == UserStateCharSelect) {
			 return "CharSelect";
		} else if(userState == UserStateCharCreate) {
			return "CharCreate";
		} else if(userState == UserStatePlaying) {
			return "Playing";
		} else { // Always default to offline.
			return "Offline";
		}
	}
};

class CUserManager : public WWCOMMON::ISingleton<CUserManager> {
public:
	/// The default maximum number of characters a user can have.
	const static int USERMANAGER_DEFAULT_MAX_CHARACTERS = 2;
	/// Initialize the user manager.
	void init();

	/**
	 * \brief Get a user.
	 *
	 * \param id The UserID to find.
	 * \return The CUser the id represents.
	 */
	CUser *getUserById(uint32 uid);

	CUser *getUserBySobId(uint32 sobid);

	/**
	 * \brief Creates a new user object.
	 *
	 * \return The new CUser generated by the database.
	 */
	//CUser *getNewUser(uint32 uid);

	/**
	 * \brief Save a user to the users table.
	 *
	 * \param user The user to be saved/updated.
	 * \return Whether the user was saved or not.
	 */
	bool saveUser(CUser *user);

private:
	CUser *getUserFromList(uint32 uid);
	CUser *getUserFromDatabase(uint32 uid);
	bool isUserInList(uint32 uid);

	typedef std::list<CUser *> TUserList;
	TUserList m_Users;
};

#endif // __CUSERMANAGER_H__

