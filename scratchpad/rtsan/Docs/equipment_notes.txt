/////////////////////////////////
// MUSINGS
/////////////////////////////////

Different ways of doing equipment media:
	1) Each EMD lists the mesh in its mesh groups with some naming convention for equipped vs inventory.
		* Good sides:
			* meshes are specialized for characters and will always look "right"
			* easy to link with different skeletons of the character to have different motion based on character motion differences.
		* Bad sides:
			* for each new item created, every character EMD has to be updated.
			* each new item has to be specialized for characters - more work
	2) The EMT lists the mesh in its equipment/mesh groups with the naming convention in #1 + input parameters used to select and morph meshes for specific EMD.
		* Good sides:
			* for each new item created, every EMT has to be updated - which is considerably less work than #1.
			* meshes are specialized for character "types" - still would look relatively nice.
			* easy to link with different skeletons and have different motion.
		* Bad sides:
			* still quite a bit of work to modify EMTs
			* standardization of meshes in the same EMT is required to allow parametrized fitting of meshes. Cracks and creases WILL appear unless some sort of in-game stitching is developed.
	3) The item EMD has a bunch of meshes based on standardized input parameters for selecting and morphing the right mesh.
		* Good sides:
			* for every new item ONLY the item EMD has to be worked with. Which makes it much more modular.
			* media for items is localized.
			* easy to manage equipment in-game.
		* Bad sides:
			* HEAVY standardization of meshes is required to allow for input parameter based selecting and morphing. In-game stitching and correction algorithms will be a must. Some tools probably have to be created to define "interfaces" on the meshes that should be able to stitch together seamlessly.
			* skeletal linking with the parent becomes difficult and needs to be programmed into the whole EMD/EMT system.

I vote for 3 altho heavy discussion is required on the bad sides and how to solve em.

Generally equipment is a child SOB of the character SOB. I imagine if the character has a bag or some other container then the other equipment is the child of that stuff instead. Also a beast of burden might have containers. We have to figure out how we access those pieces of equipment. And how do we treat beasts of burden and riding animals in the SOB hierarchy anyway.

Items in inventory are generally not rendered in the character appearance. Altho some things might appear in the hand if there is no other place to put em (different from equip, but will prevent equip in the hand - since attachment points are taken). Also the items may increase the visible size of a bag or say pockets.
Containers are usually limited by both item size and weight. This is greatly reduced when character has no container.

Equipped items NEED to get to the character skeleton in order to attach or bind themselves.
This gives rise to ideas like hierarchical EMDs, EMD linking and skeleton search propagation up through the hierarchy.

Equipment can react to the properties and events of both its own SOB and the carrier SOB(s).

EMTs specify standard attachment points that need to be defined for an EMD (say hand attachments for a biped). Each EMD has to specify the locations of these points using either a matrix or translate + rotation. The attachment points make up an attachment group. Each group has a limited "size" capacity in some magic numbers (relating to radius of the handle for the hand for example) and also some rules for the order in which attachment points should be used. So one can attach several items to the same group provided the total does not exceed the capacity. (like the character could have two forks and a knife in his hand, but only one axe with no room for anything else - using different attachment points for the forks and stuff makes sure they do not intersect too much).

Child SOBs can also be "addon" meshes if there is no skeleton. So not bound nor attached to the skeleton. Rather attached to the main transform of a specific mesh group of the parent. This gives rise to things like say extra gems on a sword, or say a chain attachment (the child can have a skeleton to animate the chain for example). Addon meshes are specified using the same idea of attachment points, they are just not related to the skeleton, but rather a mesh group.

>>> Picking up items
	* Item disappears from world view. No other sobs see it or get its events.
		* Remove from grid
		* Remove listeners
		* Basically unspawn
		* Views? Controllers? Handlers?
			* A stats/examining view would not be removed
			* A decay controller would not be removed
			* The 3D view would be changed
			
	* Item is registered with the SOB inventory.
		* Inventory/Equipment controller on the SOB.
	* Item might be displayed as a part of the SOB. Translated with SOB.
		* Item might be attached to SOB attachment points.
		* Item might be bound to SOB skeleton.

>>> Viewing the inventory
	* Displays the list of items in the inventory
	* Display includes a model, stats and name
	* Model may be the same as worn or the same as the mesh shown when laying around. Could also be totally different.
	  Could also be a billboard with just a texture.
	* Only models that fit the screen are actually displayed.

>>> Equipping items
	* Item is displayed as part of the sob. Translated with the sob.
		* Item be bound to SOB skeletons
		* Item might be attached to SOB attachment points
	* Some previous item on the sob might be unequipped.
		* Attachment points freed
	* Some previous mesh on the sob might be hidden.
		* Attachment points freed
	* Item somehow knows about its status, so that it may act on that and it may be displayed differently in the inventory.

>>> Unequipping items
	* Item meshes hidden.
	* Default meshes show for the SOB, where the item replaced a mesh.
	* Item goes back to inventory.
	* Item might be displayed as part of the SOB. Translated with SOB.

>>> Dropping items on the ground
	* Item reappears in the world. People get its events and see it in 3D.
		* Basically a spawn event.
	* Item is removed from the SOB inventory.
	* Item may be unequipped.
	* Meshes displayed may be hidden.

EQUIPMENT CONTROLLER


/////////////////////////////////
// UCs
/////////////////////////////////
_______________________________________________
UC 1. Clothing
_______________________________________________
There are clothing SOBs (shirt) which look a certain way when just lying around (a folded shirt).
They have a picture for the inventory or some model is used if examined closer. When there is nothing to put the object in while in the inventory (no bag) then it might show up as an model in the hand of the character for example - using up one of the attachment points.
When equipped they replace a mesh group on the character SOB (torso group). The mesh to display is chosen based on said mesh group dimensions (torso dimensions) and is morphed based on character properties (fat, muscle etc).
When equipped the events and properties of the character can further affect the item (wear and tear etc).

_______________________________________________
UC 2. Weapons
_______________________________________________
There are SOBs that generally look the same if lying around, in the inventory or equipped (say a sword).
They might have a picture or some kinda of different representation in the inventory view.
There might be a different model when equipped or visible while in inventory (for example the scabbard belt might be a bundle when on ground, but is around the waist of the character when equipped). The mesh to display is chosen and morphed based on character properties to fit the build of the character.
When equipped the events and properties of the character can further affect the item (wear and tear, flames on hit etc).

/////////////////////////////////
// UC Implementations
/////////////////////////////////
_______________________________________________
UC 1. Clothing
_______________________________________________
SOB1 character
	EMD character
		MeshGroup body
			Mesh normal
		MeshGroup cowl
			Mesh normal
		MeshGroup legs
			Mesh normal
	AnimLayer motion
		AnimGroup run
		AnimGroup walk
	Skeleton main
	Skeleton cape
	Skeleton skirt
	Texture naked
	Texture head
SOB2 shirt
	EMD shirt
		MeshGroup main
			Mesh normal
			Mesh inventory
		MeshGroup body
			Mesh normal
	Texture normal
SOB3 cape
	EMD cape
		MeshGroup main
			Mesh normal
			Mesh inventory
		MeshGroup cowl
			Mesh normal
	Texture normal

>>> Character picks up shirt
SOB1.add(SOB2)
	shirt.parent = character
	shirt.3dview.hide()
	eqcontainer.add(&SOB2)

>>> Character picks up cape
SOB1.add(SOB3)
	cape.parent = character
	cape.3dview.hide()
	eqcontainer.add(&SOB3)

>>> Character puts on shirt
SOB1.equip(SOB2)
	

>>> Character looks at inventory
SOB1.eqview.show()
	shirt.emd.showMesh("main", "inventory")
	cape.emd.showMesh("main", "inventory")
SOB1.eqview.update()
	shirt.emd.transform()
	cape.emd.transform()