//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
//	SCRIPT:	jsFkIkSetupEverything.mel
//	AUTHOR:	Jason Schleifer
//			oy_vay@hotmail.com
//	DATE:	May 25, 2002
//	MODIFIED: Henri Kuuste, March 17, 2005
//
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
global proc jsFkIkSetupEverything (string $mainControl, string $poleVector, string $ikHandle,	string $connectedHandle, string $prefix, string $shoulderJoint,
string $elbowJoint, string $wristJoint  )
{
	string $origAttr 	    = "FK_IK_ORIG";
	string $poleVectorAttr = "FK_IK_POLE_VECTOR";
	string $charName	   = "Arm";

	// create the "orig" nodes for each of the objects
	$mainControlOrig = `jsCreateOrigObj $mainControl $wristJoint`;
	$poleVectorOrig = `jsCreateOrigObj $poleVector $elbowJoint`;

	// add the attributes to the mainControl
	jsAddMessageAttr $mainControl $poleVectorAttr 0;
	jsAddMessageAttr $mainControl $origAttr 0;

	jsAddMessageAttr $poleVector $origAttr 0;

	// connect the attributes
	connectAttr -f ($poleVector + ".message") ($mainControl + "." + $poleVectorAttr);
	connectAttr -f ($mainControlOrig + ".message") ($mainControl + "." + $origAttr);

	connectAttr -f ($poleVectorOrig + ".message") ($poleVector + "." + $origAttr);
	
	// make a character group of all the appropriate nodes.

	select $mainControl $poleVector $ikHandle;
	select -add `ikHandle -q -jl $ikHandle`;	

	if ($connectedHandle != "")
	{
		select -add `ikHandle -q -jl $connectedHandle`;
		select -add $connectedHandle;
	}
	ClearCurrentCharacterList;
	$char = `character -name ($prefix + "_"+$charName) -excludeVisibility -excludeScale`;
	
	// create display layers for the ik vs. fk controls.
	$ikLayer	= `createDisplayLayer -name ($prefix + "_"+$charName + "_ik") -number 1 -empty`;
	$fkLayer	= `createDisplayLayer -name ($prefix + "_"+$charName + "_fk") -number 1 -empty`;

	// put the ik controls in the ikLayer
	editDisplayLayerMembers -nr $ikLayer $poleVector $mainControl;
	editDisplayLayerMembers -nr $fkLayer $shoulderJoint $elbowJoint $wristJoint ; 
	// hook up the connections to the ikBlend attribute.  If ikBlend
	// is off, then only the fk joints should be selectable, and the ik
	// controls should be hidden.  If it's on, then the fk joints are set to
	// reference mode, and the ik controls are selectable.
	// The best way to do this is with a couple of conditional nodes, as they
	// should be faster than an expression.

	// first create the conditional nodes.
	$fkCondition = `createNode condition -name ($prefix + "_" + $charName + "_fkCond")`;

	// set the attributes
	// for the fkCondition, the input will be the ikHandle ikBlend.  If
	// the ikBlend is set to 0, then the selection for the fk will be set
	// to normal.  If ikBlend is 1, then the selection is set to
	// reference.

	setAttr ($fkCondition + ".secondTerm") 0;
	connectAttr ($ikHandle + ".ikBlend") ($fkCondition + ".firstTerm");

	string $version = `about -version`;
	string $break[0];
	tokenize ($version, " ", $break);
	if ($break[0] == "4.5" || $break[0] == "6.0" || $break[0] == "6.5" || $break[0] == "7.0")
		setAttr ($fkCondition + ".colorIfFalseR") 2;
	else
		setAttr ($fkCondition + ".color2R") 2;

	connectAttr ($fkCondition + ".outColorR") ($fkLayer + ".displayType");
	
	// for the ikDisplay Layer it's a bit easier, as we're only dealing with
	// visibility.
	connectAttr ($ikHandle + ".ikBlend") ($ikLayer + ".visibility");

	
	// To make things easier to find, we can use the character node to link to
	// each of the objects.  This way it will be easier to find them later, and
	// we can also make an interface that will automatically build based on
	// whatever character nodes have these items in the scene.
	
	// the attributes we'll use are:
	//	FK_IK			designates this character node as fk_ik
	//	FK_IK_HANDLE	Ik Handle
	//	FK_IK_MAIN		main control
	//	FK_IK_PV		pole vector
	//	FK_IK_TOP_JOINT	Top joint
	//	FK_IK_PV_JOINT	pole vector joint
	//	FK_IK_EXTRA		Extra ik handle
	//	FK_IK_BOT_JOINT	Bottom joint
	//	ikBlend			linked to the ikHandle ikBlend
	//	label			additional label the animator can use

	jsAddMessageAttr $char "FK_IK" 0;
	jsAddMessageAttr $char "FK_IK_HANDLE" 0;
	jsAddMessageAttr $char "FK_IK_MAIN" 0;
	jsAddMessageAttr $char "FK_IK_PV" 0;
	jsAddMessageAttr $char "FK_IK_TOP_JOINT" 0;
	jsAddMessageAttr $char "FK_IK_PV_JOINT" 0;
	if ($connectedHandle != "")
		jsAddMessageAttr $char "FK_IK_EXTRA" 0;
	jsAddMessageAttr $char "FK_IK_BOT_JOINT" 0;
	jsAddBoolAttr $char "ikBlend";
	jsAddStringAttr $char "label";

	connectAttr -f ($ikHandle + ".message") ($char + ".FK_IK_HANDLE");
	connectAttr -f ($mainControl + ".message") ($char + ".FK_IK_MAIN");
	connectAttr -f ($poleVector + ".message") ($char + ".FK_IK_PV");
	connectAttr -f ($shoulderJoint + ".message") ($char + ".FK_IK_TOP_JOINT");
	connectAttr -f ($elbowJoint + ".message") ($char + ".FK_IK_PV_JOINT");
	if ($connectedHandle != "")
		connectAttr -f ($connectedHandle + ".message") ($char + ".FK_IK_EXTRA");
	connectAttr -f ($wristJoint + ".message") ($char + ".FK_IK_BOT_JOINT");
	connectAttr -f ($ikHandle + ".ikBlend") ($char  + ".ikBlend");
	setAttr -type "string" ($char  + ".label") $char;
}
global proc string jsCreateOrigObj (string $control, string $target)
{
	// first duplicate the control
	$dup = `duplicate $control`;

	// now delete all the children of the control
	delete `listRelatives -f -c $dup[0]`;

	// rename the duplicated object
	$orig = `rename ($dup[0]) ($control + "_ORIG")`;

	parent $orig $target;
	$objs = `ls -sl`;
	string $return  = $objs[0];

	return $return;

}
